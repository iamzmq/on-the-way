(define (assert v1 v2)
  (cond
    ((equal? v1 v2) #t)
    (else v1)))

(define (report-nobinding-found search-var)
  "No binding found")

(define (report-invalid-env) "Invalid env.")

; Env implement : Data structure representation
(define (empty-env) 
  (list 'empty-env))

(define (extend-env var val env)
  (list 'extend-env var val env))

(define (apply-env env search-var)
  (cond
    ((eq? (car env) 'empty-env) (report-nobinding-found search-var))
    ((eq? 'extend-env (car env))
     (let ((saved-var (cadr env))
           (saved-val (caddr env))
           (saved-env (cadddr env)))
       (if (eq? search-var saved-var)
           saved-val
           (apply-env saved-env search-var))))
    (else (report-invalid-env))))

; Test for first env-impl
(define test-env (extend-env 'd 4
                    (extend-env 'a 1 
                                (extend-env 'b 2 (empty-env)))))
(assert test-env '(extend-env d 4 (extend-env a 1 (extend-env b 2 (empty-env)))))
(assert 1 (apply-env test-env 'a))
(assert 2 (apply-env test-env 'b))
(assert 4 (apply-env test-env 'd))
(assert (apply-env test-env 'x) "No binding found")

; Env implement : Procedural representation
(define (empty-env) 
  (lambda (search-var) 
    (report-nobinding-found search-var)))

(define (extend-env var val env)
  (lambda (search-var) 
    (if (eq? search-var var)
        val
        (apply-env env search-var))))

(define (apply-env env search-var)
  (env search-var))

; Test for second env-impl
(define test-env (extend-env 'd 4
                    (extend-env 'a 1 
                                (extend-env 'b 2 (empty-env)))))
(assert 1 (apply-env test-env 'a))
(assert 2 (apply-env test-env 'b))
(assert 4 (apply-env test-env 'd))
(assert (apply-env test-env 'x) "No binding found")